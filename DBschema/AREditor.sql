--
-- PostgreSQL database dump
--

-- Dumped from database version 13.11 (Debian 13.11-1.pgdg120+1)
-- Dumped by pg_dump version 13.7

SET statement_timeout = 0;
SET lock_timeout = 0;
SET idle_in_transaction_session_timeout = 0;
SET client_encoding = 'UTF8';
SET standard_conforming_strings = on;
SELECT pg_catalog.set_config('search_path', '', false);
SET check_function_bodies = false;
SET xmloption = content;
SET client_min_messages = warning;
SET row_security = off;

--
-- Name: create_tables_for_schema(text); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION public.create_tables_for_schema(schema_name text) RETURNS void
    LANGUAGE plpgsql
    AS $$
BEGIN
    -- Apilog
    EXECUTE format('CREATE TABLE IF NOT EXISTS %I."Apilog" (
        "ApiLogId" integer NOT NULL GENERATED ALWAYS AS IDENTITY ( INCREMENT 1 START 1 MINVALUE 1 MAXVALUE 2147483647 CACHE 1 ),
        "Apiurl" character varying(1000),
        "ApiMathod" character varying(10),
        "UserId" integer,
        "RequestData" text,
        "ResponseData" text,
        "IPAddress" character varying(15),
        "Line" integer,
        "ExceptionMsg" text,
        "CreatedTime" time without time zone DEFAULT now(),
        CONSTRAINT "Apilog_pkey" PRIMARY KEY ("ApiLogId")
    )', schema_name);
    
    -- KnowledgeBase
    EXECUTE format('CREATE TABLE IF NOT EXISTS %I."KnowledgeBase" (
        "KnowledgeBaseId" integer NOT NULL GENERATED BY DEFAULT AS IDENTITY ( INCREMENT 1 START 1 MINVALUE 1 MAXVALUE 2147483647 CACHE 1 ),
        "Deleted" smallint DEFAULT 0,
        "KnowledgeBaseDeviceType" character varying(100),
        "KnowledgeBaseDeviceParts" character varying(100),
        "KnowledgeBaseRepairItems" character varying(100),
        "KnowledgeBaseRepairType" character varying(100),
        "KnowledgeBaseFileNo" character varying(50),
        "KnowledgeBaseAlarmCode" character varying(50),
        "KnowledgeBaseSpec" character varying(100),
        "KnowledgeBaseSystem" character varying(100),
        "KnowledgeBaseProductName" character varying(100),
        "KnowledgeBaseAlarmCause" character varying(1000),
        "KnowledgeBaseAlarmDesc" character varying(1000),
        "KnowledgeBaseAlarmOccasion" character varying(1000),
        "KnowledgeBaseModelImage" character varying(1000),
        "KnowledgeBaseToolsImage" character varying(1000),
        "KnowledgeBasePositionImage" character varying(1000),
        "Creator" integer NOT NULL,
        "CreatedTime" timestamp without time zone NOT NULL DEFAULT now(),
        "Updater" integer,
        "UpdateTime" timestamp without time zone,
        "MachineAddId" integer NOT NULL,
        "MachineName" character varying(100),
        "KnowledgeBaseModelImageNames" character varying(1000),
        "KnowledgeBaseToolsImageNames" character varying(1000),
        "KnowledgeBasePositionImageNames" character varying(1000),
        "KnowledgeBaseSOPName" character varying(100),
        "KnowledgeBase3DModelImage" character varying(1000),
        "KnowledgeBase3DModelFile" character varying(1000),
        "KnowledgeBase3DModelList" character varying(1000),
        CONSTRAINT "KnowledgeBase_pkey" PRIMARY KEY ("KnowledgeBaseId")
    )', schema_name);
    
    -- Machine
    EXECUTE format('CREATE TABLE IF NOT EXISTS %I."Machine" (
        "MachineId" integer NOT NULL GENERATED ALWAYS AS IDENTITY ( INCREMENT 1 START 1 MINVALUE 1 MAXVALUE 2147483647 CACHE 1 ),
        "Deleted" smallint DEFAULT 0,
        "CompanyId" integer NOT NULL,
        "MachineCode" character varying(100) NOT NULL,
        "MachineName" character varying(100) NOT NULL,
        "MachineSpec" character varying(100) NOT NULL,
        "MachineImage" character varying(45),
        "MachineFile" character varying(45),
        "Creator" integer NOT NULL,
        "CreatedTime" timestamp without time zone NOT NULL DEFAULT now(),
        "Updater" integer,
        "UpdateTime" timestamp without time zone,
        CONSTRAINT "Machine_pkey" PRIMARY KEY ("MachineId")
    )', schema_name);
    
    -- MachineAdd
    EXECUTE format('CREATE TABLE IF NOT EXISTS %I."MachineAdd" (
        "MachineAddId" integer NOT NULL GENERATED ALWAYS AS IDENTITY ( INCREMENT 1 START 1 MINVALUE 1 MAXVALUE 2147483647 CACHE 1 ),
        "Deleted" smallint NOT NULL DEFAULT 0,
        "MachineType" character varying(100) NOT NULL,
        "ModelSeries" character varying(100) NOT NULL,
        "MachineModel" character varying(100),
        "Creator" integer NOT NULL,
        "CreatedTime" timestamp without time zone DEFAULT now(),
        "Updater" integer,
        "UpdateTime" timestamp without time zone,
        "CompanyId" integer,
        "MachineAddCode" character varying(100),
        "MachineName" character varying(100) NOT NULL,
        "MachineImage" character varying(100),
        CONSTRAINT "MachineAdd_pkey" PRIMARY KEY ("MachineAddId")
    )', schema_name);
    
    -- MachineAlarm
    EXECUTE format('CREATE TABLE IF NOT EXISTS %I."MachineAlarm" (
        "MachineAlarmId" integer NOT NULL GENERATED ALWAYS AS IDENTITY ( INCREMENT 1 START 1 MINVALUE 1 MAXVALUE 2147483647 CACHE 1 ),
        "Deleted" smallint DEFAULT 0,
        "MachineId" integer NOT NULL,
        "MachineAlarmCode" character varying(50) NOT NULL,
        "MachineAlarmAbstract" character varying(1000) NOT NULL,
        "Creator" integer NOT NULL,
        "CreatedTime" timestamp without time zone NOT NULL DEFAULT now(),
        "Updater" integer,
        "UpdateTime" timestamp without time zone,
        CONSTRAINT "MachineAlarm_pkey" PRIMARY KEY ("MachineAlarmId")
    )', schema_name);
    
    -- MachineDevice
    EXECUTE format('CREATE TABLE IF NOT EXISTS %I."MachineDevice" (
        "MachineDeviceId" integer NOT NULL GENERATED ALWAYS AS IDENTITY ( INCREMENT 1 START 1 MINVALUE 1 MAXVALUE 2147483647 CACHE 1 ),
        "Deleted" smallint DEFAULT 0,
        "MachineId" integer NOT NULL,
        "MachineDeviceControlerModel" character varying(100),
        "MachineDeviceServerIP" character varying(20),
        "MachineDeviceServerPort" integer,
        "MachineDeviceMachineIP" character varying(20),
        "Creator" integer NOT NULL,
        "CreatedTime" timestamp without time zone NOT NULL DEFAULT now(),
        "Updater" integer,
        "UpdateTime" timestamp without time zone,
        CONSTRAINT "MachineDeviceId_pkey" PRIMARY KEY ("MachineDeviceId")
    )', schema_name);
    
    -- MachineIOT
    EXECUTE format('CREATE TABLE IF NOT EXISTS %I."MachineIOT" (
        "MachineIOTId" integer NOT NULL GENERATED ALWAYS AS IDENTITY ( INCREMENT 1 START 1 MINVALUE 1 MAXVALUE 2147483647 CACHE 1 ),
        "Deleted" smallint DEFAULT 0,
        "MachineId" integer NOT NULL,
        "MachineIOTDeviceName" character varying(1000) NOT NULL,
        "MachineIOTMQTTBroker" character varying(1000) NOT NULL,
        "MachineIOTClientId" character varying(1000) NOT NULL,
        "MachineIOTUserName" character varying(50) NOT NULL,
        "MachineIOTPassword" character varying(1000) NOT NULL,
        "Creator" integer NOT NULL,
        "CreatedTime" timestamp without time zone NOT NULL DEFAULT now(),
        "Updater" integer,
        "UpdateTime" timestamp without time zone,
        CONSTRAINT "MachineIOT_pkey" PRIMARY KEY ("MachineIOTId")
    )', schema_name);
    
    -- MachineIOTTopic
    EXECUTE format('CREATE TABLE IF NOT EXISTS %I."MachineIOTTopic" (
        "TopicId" integer NOT NULL GENERATED ALWAYS AS IDENTITY ( INCREMENT 1 START 1 MINVALUE 1 MAXVALUE 2147483647 CACHE 1 ),
        "Deleted" smallint DEFAULT 0,
        "MachineIOTId" integer NOT NULL,
        "TopicValue" character varying(1000) NOT NULL,
        "Creator" integer NOT NULL,
        "CreatedTime" timestamp without time zone NOT NULL DEFAULT now(),
        "Updater" integer,
        "UpdateTime" timestamp without time zone,
        CONSTRAINT "MachineIOTTopic_pkey" PRIMARY KEY ("TopicId")
    )', schema_name);
    
    -- SOP
    EXECUTE format('CREATE TABLE IF NOT EXISTS %I."SOP" (
        "SOPId" integer NOT NULL GENERATED ALWAYS AS IDENTITY ( INCREMENT 1 START 1 MINVALUE 1 MAXVALUE 2147483647 CACHE 1 ),
        "Deleted" smallint DEFAULT 0,
        "MachineAlarmId" integer NOT NULL,
        "SOPStep" integer NOT NULL,
        "SOPMessage" character varying(1000),
        "SOPImage" character varying(45),
        "SOPVideo" character varying(45),
        "SOPPLC1" character varying(10),
        "SOPPLC2" character varying(10),
        "SOPPLC3" character varying(10),
        "SOPPLC4" character varying(10),
        "Creator" integer NOT NULL,
        "CreatedTime" timestamp without time zone NOT NULL DEFAULT now(),
        "Updater" integer,
        "UpdateTime" timestamp without time zone,
        CONSTRAINT "SOP_pkey" PRIMARY KEY ("SOPId")
    )', schema_name);
    
    -- SOP2
    EXECUTE format('CREATE TABLE IF NOT EXISTS %I."SOP2" (
        "Deleted" smallint DEFAULT 0,
        "SOP2Step" integer,
        "SOP2Message" character varying(1000),
        "SOP2Image" character varying(50) DEFAULT ''image_value''::character varying,
        "SOP2Remark" character varying(1000),
        "SOP2RemarkImage" character varying(50),
        "SOP2Name" character varying(100),
        "Creator" integer,
        "CreatedTime" timestamp without time zone NOT NULL DEFAULT CURRENT_TIMESTAMP,
        "Updater" integer,
        "UpdateTime" timestamp without time zone,
        "SOP2Id" integer NOT NULL GENERATED ALWAYS AS IDENTITY ( INCREMENT 1 START 1 MINVALUE 1 MAXVALUE 2147483647 CACHE 1 ),
        "MachineAddId" integer,
        "KnowledgeBaseId" integer,
        "PLC1" character varying(100),
        "PLC2" character varying(100),
        "PLC3" character varying(100),
        "PLC4" character varying(100),
        "T3DModels" text DEFAULT ''[]''::jsonb,
        "SOPVideo" character varying(45)
    )', schema_name);
    
    -- SOPModel
    EXECUTE format('CREATE TABLE IF NOT EXISTS %I."SOPModel" (
        "Deleted" smallint DEFAULT 0,
        "SOPId" integer,
        "SOPModelImage" character varying(45),
        "SOPModelFile" character varying(45),
        "SOPModelPX" double precision DEFAULT 0.0,
        "SOPModelPY" double precision DEFAULT 0.0,
        "SOPModelPZ" double precision DEFAULT 0.0,
        "SOPModelRX" double precision DEFAULT 0.0,
        "SOPModelRY" double precision DEFAULT 0.0,
        "SOPModelRZ" double precision DEFAULT 0.0,
        "SOPModelSX" double precision DEFAULT 0.0,
        "SOPModelSY" double precision DEFAULT 0.0,
        "SOPModelSZ" double precision DEFAULT 0.0,
        "IsCommon" smallint DEFAULT 0,
        "Creator" integer,
        "CreatedTime" timestamp without time zone DEFAULT now(),
        "Updater" integer,
        "UpdateTime" timestamp without time zone,
        "SOPModelId" integer NOT NULL GENERATED ALWAYS AS IDENTITY ( INCREMENT 1 START 1 MINVALUE 1 MAXVALUE 2147483647 CACHE 1 ),
        CONSTRAINT "SOPModel_pkey" PRIMARY KEY ("SOPModelId")
    )', schema_name);
    
    -- Userinfo
    EXECUTE format('CREATE TABLE IF NOT EXISTS %I."Userinfo" (
        "UserId" integer NOT NULL GENERATED ALWAYS AS IDENTITY ( INCREMENT 1 START 1 MINVALUE 1 MAXVALUE 2147483647 CACHE 1 ),
        "Deleted" smallint DEFAULT 0,
        "CompanyId" integer NOT NULL,
        "UserName" character varying(50) NOT NULL,
        "UserAccount" character varying(50) NOT NULL,
        "UserPassword" character varying(256) NOT NULL,
        "UserLevel" smallint DEFAULT 0,
        "Creator" integer NOT NULL,
        "CreatedTime" timestamp without time zone NOT NULL DEFAULT now(),
        "Updater" integer,
        "UpdateTime" timestamp without time zone,
        CONSTRAINT "Userinfo_pkey" PRIMARY KEY ("UserId")
    )', schema_name);
    
    -- EmailVerifications
    EXECUTE format('CREATE TABLE IF NOT EXISTS %I."EmailVerifications" (
        "id" SERIAL PRIMARY KEY,
        "email" VARCHAR(255) NOT NULL,
        "verification_code" VARCHAR(6) NOT NULL,
        "created_at" TIMESTAMP WITH TIME ZONE DEFAULT CURRENT_TIMESTAMP,
        "expires_at" TIMESTAMP WITH TIME ZONE NOT NULL,
        "is_verified" BOOLEAN DEFAULT FALSE
    )', schema_name);
    
    -- 修改权限设置
    EXECUTE 'GRANT USAGE ON SCHEMA ' || quote_ident(schema_name) || ' TO public';
    EXECUTE 'ALTER DEFAULT PRIVILEGES IN SCHEMA ' || quote_ident(schema_name) || ' GRANT SELECT, INSERT, UPDATE, DELETE ON TABLES TO public';
END;
$$;


ALTER FUNCTION public.create_tables_for_schema(schema_name text) OWNER TO postgres;

--
-- Name: create_user_schema(); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION public.create_user_schema() RETURNS trigger
    LANGUAGE plpgsql
    AS $$
DECLARE
    schema_name TEXT;
	debug_info INTEGER;  -- Declare debug_info variable
BEGIN
    -- Generate schema name
    schema_name := 'user_' || NEW.userid;
    
    -- Create new schema
    EXECUTE 'CREATE SCHEMA IF NOT EXISTS ' || schema_name;
    
    -- Create tables in the new schema
    -- Apilog
    EXECUTE 'CREATE TABLE IF NOT EXISTS ' || schema_name || '."Apilog" (
        "ApiLogId" integer NOT NULL GENERATED ALWAYS AS IDENTITY ( INCREMENT 1 START 1 MINVALUE 1 MAXVALUE 2147483647 CACHE 1 ),
        "Apiurl" character varying(1000),
        "ApiMathod" character varying(10),
        "UserId" integer,
        "RequestData" text,
        "ResponseData" text,
        "IPAddress" character varying(15),
        "Line" integer,
        "ExceptionMsg" text,
        "CreatedTime" time without time zone DEFAULT now(),
        CONSTRAINT "Apilog_pkey" PRIMARY KEY ("ApiLogId")
    )';
    
    -- KnowledgeBase
    EXECUTE 'CREATE TABLE IF NOT EXISTS ' || schema_name || '."KnowledgeBase" (
        "KnowledgeBaseId" integer NOT NULL GENERATED BY DEFAULT AS IDENTITY ( INCREMENT 1 START 1 MINVALUE 1 MAXVALUE 2147483647 CACHE 1 ),
        "Deleted" smallint DEFAULT 0,
        "KnowledgeBaseDeviceType" character varying(100),
        "KnowledgeBaseDeviceParts" character varying(100),
        "KnowledgeBaseRepairItems" character varying(100),
        "KnowledgeBaseRepairType" character varying(100),
        "KnowledgeBaseFileNo" character varying(50),
        "KnowledgeBaseAlarmCode" character varying(50),
        "KnowledgeBaseSpec" character varying(100),
        "KnowledgeBaseSystem" character varying(100),
        "KnowledgeBaseProductName" character varying(100),
        "KnowledgeBaseAlarmCause" character varying(1000),
        "KnowledgeBaseAlarmDesc" character varying(1000),
        "KnowledgeBaseAlarmOccasion" character varying(1000),
        "KnowledgeBaseModelImage" character varying(1000),
        "KnowledgeBaseToolsImage" character varying(1000),
        "KnowledgeBasePositionImage" character varying(1000),
        "Creator" integer NOT NULL,
        "CreatedTime" timestamp without time zone NOT NULL DEFAULT now(),
        "Updater" integer,
        "UpdateTime" timestamp without time zone,
        "MachineAddId" integer NOT NULL,
        "MachineName" character varying(100),
        "KnowledgeBaseModelImageNames" character varying(1000),
        "KnowledgeBaseToolsImageNames" character varying(1000),
        "KnowledgeBasePositionImageNames" character varying(1000),
        "KnowledgeBaseSOPName" character varying(100),
        "KnowledgeBase3DModelImage" character varying(1000),
        "KnowledgeBase3DModelFile" character varying(1000),
        "KnowledgeBase3DModelList" character varying(1000),
        CONSTRAINT "KnowledgeBase_pkey" PRIMARY KEY ("KnowledgeBaseId")
    )';
    
    -- Machine
    EXECUTE 'CREATE TABLE IF NOT EXISTS ' || schema_name || '."Machine" (
        "MachineId" integer NOT NULL GENERATED ALWAYS AS IDENTITY ( INCREMENT 1 START 1 MINVALUE 1 MAXVALUE 2147483647 CACHE 1 ),
        "Deleted" smallint DEFAULT 0,
        "CompanyId" integer NOT NULL,
        "MachineCode" character varying(100) NOT NULL,
        "MachineName" character varying(100) NOT NULL,
        "MachineSpec" character varying(100) NOT NULL,
        "MachineImage" character varying(45),
        "MachineFile" character varying(45),
        "Creator" integer NOT NULL,
        "CreatedTime" timestamp without time zone NOT NULL DEFAULT now(),
        "Updater" integer,
        "UpdateTime" timestamp without time zone,
        CONSTRAINT "Machine_pkey" PRIMARY KEY ("MachineId")
    )';
    
    -- MachineAdd
    EXECUTE 'CREATE TABLE IF NOT EXISTS ' || schema_name || '."MachineAdd" (
        "MachineAddId" integer NOT NULL GENERATED ALWAYS AS IDENTITY ( INCREMENT 1 START 1 MINVALUE 1 MAXVALUE 2147483647 CACHE 1 ),
        "Deleted" smallint NOT NULL DEFAULT 0,
        "MachineType" character varying(100) NOT NULL,
        "ModelSeries" character varying(100) NOT NULL,
        "MachineModel" character varying(100),
        "Creator" integer NOT NULL,
        "CreatedTime" timestamp without time zone DEFAULT now(),
        "Updater" integer,
        "UpdateTime" timestamp without time zone,
        "CompanyId" integer,
        "MachineAddCode" character varying(100),
        "MachineName" character varying(100) NOT NULL,
        "MachineImage" character varying(100),
        CONSTRAINT "MachineAdd_pkey" PRIMARY KEY ("MachineAddId")
    )';
    
    -- MachineAlarm
    EXECUTE 'CREATE TABLE IF NOT EXISTS ' || schema_name || '."MachineAlarm" (
        "MachineAlarmId" integer NOT NULL GENERATED ALWAYS AS IDENTITY ( INCREMENT 1 START 1 MINVALUE 1 MAXVALUE 2147483647 CACHE 1 ),
        "Deleted" smallint DEFAULT 0,
        "MachineId" integer NOT NULL,
        "MachineAlarmCode" character varying(50) NOT NULL,
        "MachineAlarmAbstract" character varying(1000) NOT NULL,
        "Creator" integer NOT NULL,
        "CreatedTime" timestamp without time zone NOT NULL DEFAULT now(),
        "Updater" integer,
        "UpdateTime" timestamp without time zone,
        CONSTRAINT "MachineAlarm_pkey" PRIMARY KEY ("MachineAlarmId")
    )';
    
    -- MachineDevice
    EXECUTE 'CREATE TABLE IF NOT EXISTS ' || schema_name || '."MachineDevice" (
        "MachineDeviceId" integer NOT NULL GENERATED ALWAYS AS IDENTITY ( INCREMENT 1 START 1 MINVALUE 1 MAXVALUE 2147483647 CACHE 1 ),
        "Deleted" smallint DEFAULT 0,
        "MachineId" integer NOT NULL,
        "MachineDeviceControlerModel" character varying(100),
        "MachineDeviceServerIP" character varying(20),
        "MachineDeviceServerPort" integer,
        "MachineDeviceMachineIP" character varying(20),
        "Creator" integer NOT NULL,
        "CreatedTime" timestamp without time zone NOT NULL DEFAULT now(),
        "Updater" integer,
        "UpdateTime" timestamp without time zone,
        CONSTRAINT "MachineDeviceId_pkey" PRIMARY KEY ("MachineDeviceId")
    )';
    
    -- MachineIOT
    EXECUTE 'CREATE TABLE IF NOT EXISTS ' || schema_name || '."MachineIOT" (
        "MachineIOTId" integer NOT NULL GENERATED ALWAYS AS IDENTITY ( INCREMENT 1 START 1 MINVALUE 1 MAXVALUE 2147483647 CACHE 1 ),
        "Deleted" smallint DEFAULT 0,
        "MachineId" integer NOT NULL,
        "MachineIOTDeviceName" character varying(1000) NOT NULL,
        "MachineIOTMQTTBroker" character varying(1000) NOT NULL,
        "MachineIOTClientId" character varying(1000) NOT NULL,
        "MachineIOTUserName" character varying(50) NOT NULL,
        "MachineIOTPassword" character varying(1000) NOT NULL,
        "Creator" integer NOT NULL,
        "CreatedTime" timestamp without time zone NOT NULL DEFAULT now(),
        "Updater" integer,
        "UpdateTime" timestamp without time zone,
        CONSTRAINT "MachineIOT_pkey" PRIMARY KEY ("MachineIOTId")
    )';
    
    -- MachineIOTTopic
    EXECUTE 'CREATE TABLE IF NOT EXISTS ' || schema_name || '."MachineIOTTopic" (
        "TopicId" integer NOT NULL GENERATED ALWAYS AS IDENTITY ( INCREMENT 1 START 1 MINVALUE 1 MAXVALUE 2147483647 CACHE 1 ),
        "Deleted" smallint DEFAULT 0,
        "MachineIOTId" integer NOT NULL,
        "TopicValue" character varying(1000) NOT NULL,
        "Creator" integer NOT NULL,
        "CreatedTime" timestamp without time zone NOT NULL DEFAULT now(),
        "Updater" integer,
        "UpdateTime" timestamp without time zone,
        CONSTRAINT "MachineIOTTopic_pkey" PRIMARY KEY ("TopicId")
    )';
    
    -- SOP
    EXECUTE 'CREATE TABLE IF NOT EXISTS ' || schema_name || '."SOP" (
        "SOPId" integer NOT NULL GENERATED ALWAYS AS IDENTITY ( INCREMENT 1 START 1 MINVALUE 1 MAXVALUE 2147483647 CACHE 1 ),
        "Deleted" smallint DEFAULT 0,
        "MachineAlarmId" integer NOT NULL,
        "SOPStep" integer NOT NULL,
        "SOPMessage" character varying(1000),
        "SOPImage" character varying(45),
        "SOPVideo" character varying(45),
        "SOPPLC1" character varying(10),
        "SOPPLC2" character varying(10),
        "SOPPLC3" character varying(10),
        "SOPPLC4" character varying(10),
        "Creator" integer NOT NULL,
        "CreatedTime" timestamp without time zone NOT NULL DEFAULT now(),
        "Updater" integer,
        "UpdateTime" timestamp without time zone,
        CONSTRAINT "SOP_pkey" PRIMARY KEY ("SOPId")
    )';
    
    -- SOP2
    EXECUTE 'CREATE TABLE IF NOT EXISTS ' || schema_name || '."SOP2" (
        "Deleted" smallint DEFAULT 0,
        "SOP2Step" integer,
        "SOP2Message" character varying(1000),
        "SOP2Image" character varying(50) DEFAULT ''image_value''::character varying,
        "SOP2Remark" character varying(1000),
        "SOP2RemarkImage" character varying(50),
        "SOP2Name" character varying(100),
        "Creator" integer,
        "CreatedTime" timestamp without time zone NOT NULL DEFAULT CURRENT_TIMESTAMP,
        "Updater" integer,
        "UpdateTime" timestamp without time zone,
        "SOP2Id" integer NOT NULL GENERATED ALWAYS AS IDENTITY ( INCREMENT 1 START 1 MINVALUE 1 MAXVALUE 2147483647 CACHE 1 ),
        "MachineAddId" integer,
        "KnowledgeBaseId" integer,
        "PLC1" character varying(100),
        "PLC2" character varying(100),
        "PLC3" character varying(100),
        "PLC4" character varying(100),
        "T3DModels" text DEFAULT ''[]''::jsonb,
        "SOPVideo" character varying(45),
        CONSTRAINT "SOP2_pkey" PRIMARY KEY ("SOP2Id")
    )';
    
    -- SOPModel
    EXECUTE 'CREATE TABLE IF NOT EXISTS ' || schema_name || '."SOPModel" (
        "Deleted" smallint DEFAULT 0,
        "SOPId" integer,
        "SOPModelImage" character varying(45),
        "SOPModelFile" character varying(45),
        "SOPModelPX" double precision DEFAULT 0.0,
        "SOPModelPY" double precision DEFAULT 0.0,
        "SOPModelPZ" double precision DEFAULT 0.0,
        "SOPModelRX" double precision DEFAULT 0.0,
        "SOPModelRY" double precision DEFAULT 0.0,
        "SOPModelRZ" double precision DEFAULT 0.0,
        "SOPModelSX" double precision DEFAULT 0.0,
        "SOPModelSY" double precision DEFAULT 0.0,
        "SOPModelSZ" double precision DEFAULT 0.0,
        "IsCommon" smallint DEFAULT 0,
        "Creator" integer,
        "CreatedTime" timestamp without time zone DEFAULT now(),
        "Updater" integer,
        "UpdateTime" timestamp without time zone,
        "SOPModelId" integer NOT NULL GENERATED ALWAYS AS IDENTITY ( INCREMENT 1 START 1 MINVALUE 1 MAXVALUE 2147483647 CACHE 1 ),
        CONSTRAINT "SOPModel_pkey" PRIMARY KEY ("SOPModelId")
    )';
    
    -- Userinfo
    EXECUTE 'CREATE TABLE IF NOT EXISTS ' || schema_name || '."Userinfo" (
        "UserId" integer NOT NULL GENERATED ALWAYS AS IDENTITY ( INCREMENT 1 START 1 MINVALUE 1 MAXVALUE 2147483647 CACHE 1 ),
        "Deleted" smallint DEFAULT 0,
        "CompanyId" integer NOT NULL,
        "UserName" character varying(50) NOT NULL,
        "UserAccount" character varying(50) NOT NULL,
        "UserPassword" character varying(256) NOT NULL,
        "UserLevel" smallint DEFAULT 0,
        "Creator" integer NOT NULL,
        "CreatedTime" timestamp without time zone NOT NULL DEFAULT now(),
        "Updater" integer,
        "UpdateTime" timestamp without time zone,
        CONSTRAINT "Userinfo_pkey" PRIMARY KEY ("UserId"),
        CONSTRAINT "Userinfo_UserAccount_key" UNIQUE ("UserAccount")
    )';
    
    -- EmailVerifications
    EXECUTE 'CREATE TABLE IF NOT EXISTS ' || schema_name || '."EmailVerifications" (
        "id" SERIAL PRIMARY KEY,
        "email" VARCHAR(255) NOT NULL,
        "verification_code" VARCHAR(6) NOT NULL,
        "created_at" TIMESTAMP WITH TIME ZONE DEFAULT CURRENT_TIMESTAMP,
        "expires_at" TIMESTAMP WITH TIME ZONE NOT NULL,
        "is_verified" BOOLEAN DEFAULT FALSE
    )';
	
	-- Insert default admin account
   BEGIN
        EXECUTE format('
            INSERT INTO %I."Userinfo" ("CompanyId", "UserName", "UserAccount", "UserPassword", "UserLevel", "Creator")
            VALUES (1, ''Admin'', ''admin'', ''8d969eef6ecad3c29a3a629280e686cf0c3f5d5a86aff3ca12020c923adc6c92'', 1, 1)
            ON CONFLICT ("UserAccount") DO NOTHING
        ', schema_name);
    EXCEPTION WHEN OTHERS THEN
        -- Log the error
        INSERT INTO public.error_log (error_message, error_context)
        VALUES (SQLERRM, format('Error inserting default admin into schema %s', schema_name));
    END;
    
    -- Verify if the insert was successful
    EXECUTE format('
        SELECT COUNT(*) FROM %I."Userinfo" WHERE "UserAccount" = ''admin''
    ', schema_name) INTO debug_info;
    
    -- Log the result
    INSERT INTO public.debug_log (message)
    VALUES (format('Schema %s created. Admin count: %s', schema_name, debug_info));

    RETURN NEW;
END;
$$;


ALTER FUNCTION public.create_user_schema() OWNER TO postgres;

--
-- Name: create_user_schema(text); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION public.create_user_schema(schema_name text) RETURNS void
    LANGUAGE plpgsql
    AS $$
BEGIN
    -- 创建 schema，如果不存在
    EXECUTE format('CREATE SCHEMA IF NOT EXISTS %I', schema_name);

    -- 在新的 schema 中创建 Userinfo 表，如果不存在，并设置 UserAccount 为唯一
    EXECUTE format('
        CREATE TABLE IF NOT EXISTS %I."Userinfo" (
            "UserId" SERIAL PRIMARY KEY,
            "UserAccount" VARCHAR(255) UNIQUE,
            "UserName" VARCHAR(255),
            "UserPassword" VARCHAR(255),
            "UserLevel" INTEGER,
            "Creator" INTEGER,
            "CreatedTime" TIMESTAMP WITHOUT TIME ZONE DEFAULT NOW(),
            "Updater" INTEGER,
            "UpdateTime" TIMESTAMP WITHOUT TIME ZONE
        );', schema_name);
END;
$$;


ALTER FUNCTION public.create_user_schema(schema_name text) OWNER TO postgres;

--
-- Name: generate_schema_name(); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION public.generate_schema_name() RETURNS trigger
    LANGUAGE plpgsql
    AS $$
BEGIN
  NEW.schema_name := 'user_' || NEW.userid;
  RETURN NEW;
END;
$$;


ALTER FUNCTION public.generate_schema_name() OWNER TO postgres;

--
-- Name: update_knowledge_base_deleted(); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION public.update_knowledge_base_deleted() RETURNS trigger
    LANGUAGE plpgsql
    AS $$
BEGIN
    IF NEW."Deleted" = 1 THEN
        UPDATE "KnowledgeBase"
        SET "Deleted" = 1
        WHERE "MachineAddId" = NEW."MachineAddId";
    END IF;
    RETURN NEW;
END;
$$;


ALTER FUNCTION public.update_knowledge_base_deleted() OWNER TO postgres;

SET default_tablespace = '';

SET default_table_access_method = heap;

--
-- Name: Apilog; Type: TABLE; Schema: public; Owner: postgres
--

CREATE TABLE public."Apilog" (
    "ApiLogId" integer NOT NULL,
    "Apiurl" character varying(1000),
    "ApiMathod" character varying(10),
    "UserId" integer,
    "RequestData" text,
    "ResponseData" text,
    "IPAddress" character varying(15),
    "Line" integer,
    "ExceptionMsg" text,
    "CreatedTime" time without time zone DEFAULT now()
);


ALTER TABLE public."Apilog" OWNER TO postgres;

--
-- Name: Apilog_ApiLogId_seq; Type: SEQUENCE; Schema: public; Owner: postgres
--

ALTER TABLE public."Apilog" ALTER COLUMN "ApiLogId" ADD GENERATED ALWAYS AS IDENTITY (
    SEQUENCE NAME public."Apilog_ApiLogId_seq"
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1
);


--
-- Name: EmailVerifications; Type: TABLE; Schema: public; Owner: postgres
--

CREATE TABLE public."EmailVerifications" (
    id integer NOT NULL,
    email character varying(255) NOT NULL,
    verification_code character varying(255) NOT NULL,
    verification_code_expiry timestamp without time zone NOT NULL,
    is_verified boolean DEFAULT false,
    "Creator" integer DEFAULT 1 NOT NULL,
    "CreatedTime" timestamp without time zone DEFAULT now() NOT NULL,
    "Updater" integer,
    "UpdateTime" timestamp without time zone
);


ALTER TABLE public."EmailVerifications" OWNER TO postgres;

--
-- Name: EmailVerifications_id_seq; Type: SEQUENCE; Schema: public; Owner: postgres
--

CREATE SEQUENCE public."EmailVerifications_id_seq"
    AS integer
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE public."EmailVerifications_id_seq" OWNER TO postgres;

--
-- Name: EmailVerifications_id_seq; Type: SEQUENCE OWNED BY; Schema: public; Owner: postgres
--

ALTER SEQUENCE public."EmailVerifications_id_seq" OWNED BY public."EmailVerifications".id;


--
-- Name: KnowledgeBase; Type: TABLE; Schema: public; Owner: postgres
--

CREATE TABLE public."KnowledgeBase" (
    "KnowledgeBaseId" integer NOT NULL,
    "Deleted" smallint DEFAULT 0,
    "KnowledgeBaseDeviceType" character varying(100),
    "KnowledgeBaseDeviceParts" character varying(100),
    "KnowledgeBaseRepairItems" character varying(100),
    "KnowledgeBaseRepairType" character varying(100),
    "KnowledgeBaseFileNo" character varying(50),
    "KnowledgeBaseAlarmCode" character varying(50),
    "KnowledgeBaseSpec" character varying(100),
    "KnowledgeBaseSystem" character varying(100),
    "KnowledgeBaseProductName" character varying(100),
    "KnowledgeBaseAlarmCause" character varying(1000),
    "KnowledgeBaseAlarmDesc" character varying(1000),
    "KnowledgeBaseAlarmOccasion" character varying(1000),
    "KnowledgeBaseModelImage" character varying(1000),
    "KnowledgeBaseToolsImage" character varying(1000),
    "KnowledgeBasePositionImage" character varying(1000),
    "Creator" integer NOT NULL,
    "CreatedTime" timestamp without time zone DEFAULT now() NOT NULL,
    "Updater" integer,
    "UpdateTime" timestamp without time zone,
    "MachineAddId" integer NOT NULL,
    "MachineName" character varying(100),
    "KnowledgeBaseModelImageNames" character varying(1000),
    "KnowledgeBaseToolsImageNames" character varying(1000),
    "KnowledgeBasePositionImageNames" character varying(1000),
    "KnowledgeBaseSOPName" character varying(100),
    "KnowledgeBase3DModelImage" character varying(1000),
    "KnowledgeBase3DModelFile" character varying(1000),
    "KnowledgeBase3DModelList" character varying(1000)
);


ALTER TABLE public."KnowledgeBase" OWNER TO postgres;

--
-- Name: KnowledgeBase_KnowledgeBaseId_seq; Type: SEQUENCE; Schema: public; Owner: postgres
--

ALTER TABLE public."KnowledgeBase" ALTER COLUMN "KnowledgeBaseId" ADD GENERATED BY DEFAULT AS IDENTITY (
    SEQUENCE NAME public."KnowledgeBase_KnowledgeBaseId_seq"
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1
);


--
-- Name: Machine; Type: TABLE; Schema: public; Owner: postgres
--

CREATE TABLE public."Machine" (
    "MachineId" integer NOT NULL,
    "Deleted" smallint DEFAULT 0,
    "CompanyId" integer NOT NULL,
    "MachineCode" character varying(100) NOT NULL,
    "MachineName" character varying(100) NOT NULL,
    "MachineSpec" character varying(100) NOT NULL,
    "MachineImage" character varying(45),
    "MachineFile" character varying(45),
    "Creator" integer NOT NULL,
    "CreatedTime" timestamp without time zone DEFAULT now() NOT NULL,
    "Updater" integer,
    "UpdateTime" timestamp without time zone
);


ALTER TABLE public."Machine" OWNER TO postgres;

--
-- Name: COLUMN "Machine"."MachineId"; Type: COMMENT; Schema: public; Owner: postgres
--

COMMENT ON COLUMN public."Machine"."MachineId" IS '機台流水號';


--
-- Name: COLUMN "Machine"."Deleted"; Type: COMMENT; Schema: public; Owner: postgres
--

COMMENT ON COLUMN public."Machine"."Deleted" IS '是否刪除';


--
-- Name: COLUMN "Machine"."CompanyId"; Type: COMMENT; Schema: public; Owner: postgres
--

COMMENT ON COLUMN public."Machine"."CompanyId" IS '公司流水號';


--
-- Name: COLUMN "Machine"."MachineCode"; Type: COMMENT; Schema: public; Owner: postgres
--

COMMENT ON COLUMN public."Machine"."MachineCode" IS '機台ID';


--
-- Name: COLUMN "Machine"."MachineName"; Type: COMMENT; Schema: public; Owner: postgres
--

COMMENT ON COLUMN public."Machine"."MachineName" IS '機台名稱';


--
-- Name: COLUMN "Machine"."MachineSpec"; Type: COMMENT; Schema: public; Owner: postgres
--

COMMENT ON COLUMN public."Machine"."MachineSpec" IS '機台規格';


--
-- Name: COLUMN "Machine"."MachineImage"; Type: COMMENT; Schema: public; Owner: postgres
--

COMMENT ON COLUMN public."Machine"."MachineImage" IS '機台圖片GUID';


--
-- Name: COLUMN "Machine"."MachineFile"; Type: COMMENT; Schema: public; Owner: postgres
--

COMMENT ON COLUMN public."Machine"."MachineFile" IS '機台檔案GUID';


--
-- Name: COLUMN "Machine"."Creator"; Type: COMMENT; Schema: public; Owner: postgres
--

COMMENT ON COLUMN public."Machine"."Creator" IS '建立者';


--
-- Name: COLUMN "Machine"."CreatedTime"; Type: COMMENT; Schema: public; Owner: postgres
--

COMMENT ON COLUMN public."Machine"."CreatedTime" IS '建立時間';


--
-- Name: COLUMN "Machine"."Updater"; Type: COMMENT; Schema: public; Owner: postgres
--

COMMENT ON COLUMN public."Machine"."Updater" IS '修改者';


--
-- Name: COLUMN "Machine"."UpdateTime"; Type: COMMENT; Schema: public; Owner: postgres
--

COMMENT ON COLUMN public."Machine"."UpdateTime" IS '修改時間';


--
-- Name: MachineAdd; Type: TABLE; Schema: public; Owner: postgres
--

CREATE TABLE public."MachineAdd" (
    "MachineAddId" integer NOT NULL,
    "Deleted" smallint DEFAULT 0 NOT NULL,
    "MachineType" character varying(100) NOT NULL,
    "ModelSeries" character varying(100) NOT NULL,
    "MachineModel" character varying(100),
    "Creator" integer NOT NULL,
    "CreatedTime" timestamp without time zone DEFAULT now(),
    "Updater" integer,
    "UpdateTime" timestamp without time zone,
    "CompanyId" integer,
    "MachineAddCode" character varying(100),
    "MachineName" character varying(100) NOT NULL,
    "MachineImage" character varying(100)
);


ALTER TABLE public."MachineAdd" OWNER TO postgres;

--
-- Name: MachineAdd_MachineAddId_seq; Type: SEQUENCE; Schema: public; Owner: postgres
--

ALTER TABLE public."MachineAdd" ALTER COLUMN "MachineAddId" ADD GENERATED ALWAYS AS IDENTITY (
    SEQUENCE NAME public."MachineAdd_MachineAddId_seq"
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1
);


--
-- Name: MachineAlarm; Type: TABLE; Schema: public; Owner: postgres
--

CREATE TABLE public."MachineAlarm" (
    "MachineAlarmId" integer NOT NULL,
    "Deleted" smallint DEFAULT 0,
    "MachineId" integer NOT NULL,
    "MachineAlarmCode" character varying(50) NOT NULL,
    "MachineAlarmAbstract" character varying(1000) NOT NULL,
    "Creator" integer NOT NULL,
    "CreatedTime" timestamp without time zone DEFAULT now() NOT NULL,
    "Updater" integer,
    "UpdateTime" timestamp without time zone
);


ALTER TABLE public."MachineAlarm" OWNER TO postgres;

--
-- Name: TABLE "MachineAlarm"; Type: COMMENT; Schema: public; Owner: postgres
--

COMMENT ON TABLE public."MachineAlarm" IS '故障排除';


--
-- Name: MachineAlarm_MachineAlarmId_seq; Type: SEQUENCE; Schema: public; Owner: postgres
--

ALTER TABLE public."MachineAlarm" ALTER COLUMN "MachineAlarmId" ADD GENERATED ALWAYS AS IDENTITY (
    SEQUENCE NAME public."MachineAlarm_MachineAlarmId_seq"
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1
);


--
-- Name: MachineDevice; Type: TABLE; Schema: public; Owner: postgres
--

CREATE TABLE public."MachineDevice" (
    "MachineDeviceId" integer NOT NULL,
    "Deleted" smallint DEFAULT 0,
    "MachineId" integer NOT NULL,
    "MachineDeviceControlerModel" character varying(100),
    "MachineDeviceServerIP" character varying(20),
    "MachineDeviceServerPort" integer,
    "MachineDeviceMachineIP" character varying(20),
    "Creator" integer NOT NULL,
    "CreatedTime" timestamp without time zone DEFAULT now() NOT NULL,
    "Updater" integer,
    "UpdateTime" timestamp without time zone
);


ALTER TABLE public."MachineDevice" OWNER TO postgres;

--
-- Name: COLUMN "MachineDevice"."MachineDeviceId"; Type: COMMENT; Schema: public; Owner: postgres
--

COMMENT ON COLUMN public."MachineDevice"."MachineDeviceId" IS '設備流水號';


--
-- Name: COLUMN "MachineDevice"."Deleted"; Type: COMMENT; Schema: public; Owner: postgres
--

COMMENT ON COLUMN public."MachineDevice"."Deleted" IS '是否刪除';


--
-- Name: COLUMN "MachineDevice"."MachineId"; Type: COMMENT; Schema: public; Owner: postgres
--

COMMENT ON COLUMN public."MachineDevice"."MachineId" IS '機台流水號';


--
-- Name: COLUMN "MachineDevice"."MachineDeviceControlerModel"; Type: COMMENT; Schema: public; Owner: postgres
--

COMMENT ON COLUMN public."MachineDevice"."MachineDeviceControlerModel" IS '控制器型號';


--
-- Name: COLUMN "MachineDevice"."MachineDeviceServerIP"; Type: COMMENT; Schema: public; Owner: postgres
--

COMMENT ON COLUMN public."MachineDevice"."MachineDeviceServerIP" IS 'ServerIP';


--
-- Name: COLUMN "MachineDevice"."MachineDeviceServerPort"; Type: COMMENT; Schema: public; Owner: postgres
--

COMMENT ON COLUMN public."MachineDevice"."MachineDeviceServerPort" IS 'ServerPort';


--
-- Name: COLUMN "MachineDevice"."MachineDeviceMachineIP"; Type: COMMENT; Schema: public; Owner: postgres
--

COMMENT ON COLUMN public."MachineDevice"."MachineDeviceMachineIP" IS 'MachineIP';


--
-- Name: COLUMN "MachineDevice"."Creator"; Type: COMMENT; Schema: public; Owner: postgres
--

COMMENT ON COLUMN public."MachineDevice"."Creator" IS '建立者';


--
-- Name: COLUMN "MachineDevice"."CreatedTime"; Type: COMMENT; Schema: public; Owner: postgres
--

COMMENT ON COLUMN public."MachineDevice"."CreatedTime" IS '建立時間';


--
-- Name: COLUMN "MachineDevice"."Updater"; Type: COMMENT; Schema: public; Owner: postgres
--

COMMENT ON COLUMN public."MachineDevice"."Updater" IS '修改者';


--
-- Name: COLUMN "MachineDevice"."UpdateTime"; Type: COMMENT; Schema: public; Owner: postgres
--

COMMENT ON COLUMN public."MachineDevice"."UpdateTime" IS '修改時間';


--
-- Name: MachineDevice_MachineDeviceId_seq; Type: SEQUENCE; Schema: public; Owner: postgres
--

ALTER TABLE public."MachineDevice" ALTER COLUMN "MachineDeviceId" ADD GENERATED ALWAYS AS IDENTITY (
    SEQUENCE NAME public."MachineDevice_MachineDeviceId_seq"
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1
);


--
-- Name: MachineIOT; Type: TABLE; Schema: public; Owner: postgres
--

CREATE TABLE public."MachineIOT" (
    "MachineIOTId" integer NOT NULL,
    "Deleted" smallint DEFAULT 0,
    "MachineId" integer NOT NULL,
    "MachineIOTDeviceName" character varying(1000) NOT NULL,
    "MachineIOTMQTTBroker" character varying(1000) NOT NULL,
    "MachineIOTClientId" character varying(1000) NOT NULL,
    "MachineIOTUserName" character varying(50) NOT NULL,
    "MachineIOTPassword" character varying(1000) NOT NULL,
    "Creator" integer NOT NULL,
    "CreatedTime" timestamp without time zone DEFAULT now() NOT NULL,
    "Updater" integer,
    "UpdateTime" timestamp without time zone
);


ALTER TABLE public."MachineIOT" OWNER TO postgres;

--
-- Name: COLUMN "MachineIOT"."Deleted"; Type: COMMENT; Schema: public; Owner: postgres
--

COMMENT ON COLUMN public."MachineIOT"."Deleted" IS '是否刪除';


--
-- Name: COLUMN "MachineIOT"."MachineId"; Type: COMMENT; Schema: public; Owner: postgres
--

COMMENT ON COLUMN public."MachineIOT"."MachineId" IS '機台流水號';


--
-- Name: COLUMN "MachineIOT"."MachineIOTDeviceName"; Type: COMMENT; Schema: public; Owner: postgres
--

COMMENT ON COLUMN public."MachineIOT"."MachineIOTDeviceName" IS '設備名稱';


--
-- Name: COLUMN "MachineIOT"."MachineIOTUserName"; Type: COMMENT; Schema: public; Owner: postgres
--

COMMENT ON COLUMN public."MachineIOT"."MachineIOTUserName" IS 'UserName';


--
-- Name: COLUMN "MachineIOT"."MachineIOTPassword"; Type: COMMENT; Schema: public; Owner: postgres
--

COMMENT ON COLUMN public."MachineIOT"."MachineIOTPassword" IS 'Password';


--
-- Name: COLUMN "MachineIOT"."Creator"; Type: COMMENT; Schema: public; Owner: postgres
--

COMMENT ON COLUMN public."MachineIOT"."Creator" IS '建立者';


--
-- Name: COLUMN "MachineIOT"."CreatedTime"; Type: COMMENT; Schema: public; Owner: postgres
--

COMMENT ON COLUMN public."MachineIOT"."CreatedTime" IS '建立時間';


--
-- Name: COLUMN "MachineIOT"."Updater"; Type: COMMENT; Schema: public; Owner: postgres
--

COMMENT ON COLUMN public."MachineIOT"."Updater" IS '修改者';


--
-- Name: COLUMN "MachineIOT"."UpdateTime"; Type: COMMENT; Schema: public; Owner: postgres
--

COMMENT ON COLUMN public."MachineIOT"."UpdateTime" IS '修改時間';


--
-- Name: MachineIOTTopic; Type: TABLE; Schema: public; Owner: postgres
--

CREATE TABLE public."MachineIOTTopic" (
    "TopicId" integer NOT NULL,
    "Deleted" smallint DEFAULT 0,
    "MachineIOTId" integer NOT NULL,
    "TopicValue" character varying(1000) NOT NULL,
    "Creator" integer NOT NULL,
    "CreatedTime" timestamp without time zone DEFAULT now() NOT NULL,
    "Updater" integer,
    "UpdateTime" timestamp without time zone
);


ALTER TABLE public."MachineIOTTopic" OWNER TO postgres;

--
-- Name: COLUMN "MachineIOTTopic"."Creator"; Type: COMMENT; Schema: public; Owner: postgres
--

COMMENT ON COLUMN public."MachineIOTTopic"."Creator" IS '建立者';


--
-- Name: COLUMN "MachineIOTTopic"."CreatedTime"; Type: COMMENT; Schema: public; Owner: postgres
--

COMMENT ON COLUMN public."MachineIOTTopic"."CreatedTime" IS '建立時間';


--
-- Name: COLUMN "MachineIOTTopic"."Updater"; Type: COMMENT; Schema: public; Owner: postgres
--

COMMENT ON COLUMN public."MachineIOTTopic"."Updater" IS '修改者';


--
-- Name: COLUMN "MachineIOTTopic"."UpdateTime"; Type: COMMENT; Schema: public; Owner: postgres
--

COMMENT ON COLUMN public."MachineIOTTopic"."UpdateTime" IS '修改時間';


--
-- Name: MachineIOTTopic_TopicId_seq; Type: SEQUENCE; Schema: public; Owner: postgres
--

ALTER TABLE public."MachineIOTTopic" ALTER COLUMN "TopicId" ADD GENERATED ALWAYS AS IDENTITY (
    SEQUENCE NAME public."MachineIOTTopic_TopicId_seq"
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1
);


--
-- Name: MachineIOT_MachineIOTId_seq; Type: SEQUENCE; Schema: public; Owner: postgres
--

ALTER TABLE public."MachineIOT" ALTER COLUMN "MachineIOTId" ADD GENERATED ALWAYS AS IDENTITY (
    SEQUENCE NAME public."MachineIOT_MachineIOTId_seq"
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1
);


--
-- Name: Machine_MachineId_seq; Type: SEQUENCE; Schema: public; Owner: postgres
--

ALTER TABLE public."Machine" ALTER COLUMN "MachineId" ADD GENERATED ALWAYS AS IDENTITY (
    SEQUENCE NAME public."Machine_MachineId_seq"
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1
);


--
-- Name: SOP; Type: TABLE; Schema: public; Owner: postgres
--

CREATE TABLE public."SOP" (
    "SOPId" integer NOT NULL,
    "Deleted" smallint DEFAULT 0,
    "MachineAlarmId" integer NOT NULL,
    "SOPStep" integer NOT NULL,
    "SOPMessage" character varying(1000),
    "SOPImage" character varying(45),
    "SOPVideo" character varying(45),
    "SOPPLC1" character varying(10),
    "SOPPLC2" character varying(10),
    "SOPPLC3" character varying(10),
    "SOPPLC4" character varying(10),
    "Creator" integer NOT NULL,
    "CreatedTime" timestamp without time zone DEFAULT now() NOT NULL,
    "Updater" integer,
    "UpdateTime" timestamp without time zone
);


ALTER TABLE public."SOP" OWNER TO postgres;

--
-- Name: TABLE "SOP"; Type: COMMENT; Schema: public; Owner: postgres
--

COMMENT ON TABLE public."SOP" IS '故障排除或教育訓練問題';


--
-- Name: SOP2; Type: TABLE; Schema: public; Owner: postgres
--

CREATE TABLE public."SOP2" (
    "Deleted" smallint DEFAULT 0,
    "SOP2Step" integer,
    "SOP2Message" character varying(1000),
    "SOP2Image" character varying(50) DEFAULT 'image_value'::character varying,
    "SOP2Remark" character varying(1000),
    "SOP2RemarkImage" character varying(50),
    "SOP2Name" character varying(100),
    "Creator" integer,
    "CreatedTime" timestamp without time zone DEFAULT CURRENT_TIMESTAMP NOT NULL,
    "Updater" integer,
    "UpdateTime" timestamp without time zone,
    "SOP2Id" integer NOT NULL,
    "MachineAddId" integer,
    "KnowledgeBaseId" integer,
    "PLC1" character varying(100),
    "PLC2" character varying(100),
    "PLC3" character varying(100),
    "PLC4" character varying(100),
    "T3DModels" text DEFAULT '[]'::jsonb,
    "SOPVideo" character varying(45)
);


ALTER TABLE public."SOP2" OWNER TO postgres;

--
-- Name: SOP2_SOP2Id_seq; Type: SEQUENCE; Schema: public; Owner: postgres
--

ALTER TABLE public."SOP2" ALTER COLUMN "SOP2Id" ADD GENERATED ALWAYS AS IDENTITY (
    SEQUENCE NAME public."SOP2_SOP2Id_seq"
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1
);


--
-- Name: SOPModel_SOPModelId_seq; Type: SEQUENCE; Schema: public; Owner: postgres
--

CREATE SEQUENCE public."SOPModel_SOPModelId_seq"
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    MAXVALUE 2147483647
    CACHE 1;


ALTER TABLE public."SOPModel_SOPModelId_seq" OWNER TO postgres;

--
-- Name: SOPModel; Type: TABLE; Schema: public; Owner: postgres
--

CREATE TABLE public."SOPModel" (
    "Deleted" smallint DEFAULT 0,
    "SOPId" integer,
    "SOPModelImage" character varying(45),
    "SOPModelFile" character varying(45),
    "SOPModelPX" double precision DEFAULT 0.0,
    "SOPModelPY" double precision DEFAULT 0.0,
    "SOPModelPZ" double precision DEFAULT 0.0,
    "SOPModelRX" double precision DEFAULT 0.0,
    "SOPModelRY" double precision DEFAULT 0.0,
    "SOPModelRZ" double precision DEFAULT 0.0,
    "SOPModelSX" double precision DEFAULT 0.0,
    "SOPModelSY" double precision DEFAULT 0.0,
    "SOPModelSZ" double precision DEFAULT 0.0,
    "IsCommon" smallint DEFAULT 0,
    "Creator" integer,
    "CreatedTime" timestamp without time zone DEFAULT now(),
    "Updater" integer,
    "UpdateTime" timestamp without time zone,
    "SOPModelId" integer DEFAULT nextval('public."SOPModel_SOPModelId_seq"'::regclass) NOT NULL
);


ALTER TABLE public."SOPModel" OWNER TO postgres;

--
-- Name: TABLE "SOPModel"; Type: COMMENT; Schema: public; Owner: postgres
--

COMMENT ON TABLE public."SOPModel" IS 'SOP所用到的模型';


--
-- Name: SOP_SOPId_seq; Type: SEQUENCE; Schema: public; Owner: postgres
--

ALTER TABLE public."SOP" ALTER COLUMN "SOPId" ADD GENERATED ALWAYS AS IDENTITY (
    SEQUENCE NAME public."SOP_SOPId_seq"
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1
);


--
-- Name: Userinfo; Type: TABLE; Schema: public; Owner: postgres
--

CREATE TABLE public."Userinfo" (
    "UserId" integer NOT NULL,
    "Deleted" smallint DEFAULT 0,
    "CompanyId" integer NOT NULL,
    "UserName" character varying(50) NOT NULL,
    "UserAccount" character varying(50) NOT NULL,
    "UserPassword" character varying(256) NOT NULL,
    "UserLevel" smallint DEFAULT 0,
    "Creator" integer NOT NULL,
    "CreatedTime" timestamp without time zone DEFAULT now() NOT NULL,
    "Updater" integer,
    "UpdateTime" timestamp without time zone
);


ALTER TABLE public."Userinfo" OWNER TO postgres;

--
-- Name: COLUMN "Userinfo"."UserId"; Type: COMMENT; Schema: public; Owner: postgres
--

COMMENT ON COLUMN public."Userinfo"."UserId" IS '用戶id';


--
-- Name: Userinfo_UserId_seq; Type: SEQUENCE; Schema: public; Owner: postgres
--

CREATE SEQUENCE public."Userinfo_UserId_seq"
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    MAXVALUE 2147483647
    CACHE 1;


ALTER TABLE public."Userinfo_UserId_seq" OWNER TO postgres;

--
-- Name: Userinfo_UserId_seq1; Type: SEQUENCE; Schema: public; Owner: postgres
--

ALTER TABLE public."Userinfo" ALTER COLUMN "UserId" ADD GENERATED ALWAYS AS IDENTITY (
    SEQUENCE NAME public."Userinfo_UserId_seq1"
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1
);


--
-- Name: vendors_id_seq; Type: SEQUENCE; Schema: public; Owner: postgres
--

CREATE SEQUENCE public.vendors_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE public.vendors_id_seq OWNER TO postgres;

--
-- Name: vendors_userid_seq; Type: SEQUENCE; Schema: public; Owner: postgres
--

CREATE SEQUENCE public.vendors_userid_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE public.vendors_userid_seq OWNER TO postgres;

--
-- Name: Vendors; Type: TABLE; Schema: public; Owner: postgres
--

CREATE TABLE public."Vendors" (
    id integer DEFAULT nextval('public.vendors_id_seq'::regclass) NOT NULL,
    company_name character varying(255) NOT NULL,
    contact_name character varying(255) NOT NULL,
    email character varying(255) NOT NULL,
    phone_number character varying(255),
    industry_type character varying(255),
    password_hash character varying(255) NOT NULL,
    "Creator" integer DEFAULT 1 NOT NULL,
    "CreatedTime" timestamp without time zone DEFAULT now() NOT NULL,
    "Updater" integer,
    "UpdateTime" timestamp without time zone,
    userid integer DEFAULT nextval('public.vendors_userid_seq'::regclass),
    schema_name character varying(50)
);


ALTER TABLE public."Vendors" OWNER TO postgres;

--
-- Name: debug_log; Type: TABLE; Schema: public; Owner: postgres
--

CREATE TABLE public.debug_log (
    id integer NOT NULL,
    message text,
    created_at timestamp with time zone DEFAULT CURRENT_TIMESTAMP
);


ALTER TABLE public.debug_log OWNER TO postgres;

--
-- Name: debug_log_id_seq; Type: SEQUENCE; Schema: public; Owner: postgres
--

CREATE SEQUENCE public.debug_log_id_seq
    AS integer
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE public.debug_log_id_seq OWNER TO postgres;

--
-- Name: debug_log_id_seq; Type: SEQUENCE OWNED BY; Schema: public; Owner: postgres
--

ALTER SEQUENCE public.debug_log_id_seq OWNED BY public.debug_log.id;


--
-- Name: error_log; Type: TABLE; Schema: public; Owner: postgres
--

CREATE TABLE public.error_log (
    id integer NOT NULL,
    error_message text,
    error_context text,
    created_at timestamp with time zone DEFAULT CURRENT_TIMESTAMP
);


ALTER TABLE public.error_log OWNER TO postgres;

--
-- Name: error_log_id_seq; Type: SEQUENCE; Schema: public; Owner: postgres
--

CREATE SEQUENCE public.error_log_id_seq
    AS integer
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE public.error_log_id_seq OWNER TO postgres;

--
-- Name: error_log_id_seq; Type: SEQUENCE OWNED BY; Schema: public; Owner: postgres
--

ALTER SEQUENCE public.error_log_id_seq OWNED BY public.error_log.id;


--
-- Name: test_table; Type: TABLE; Schema: public; Owner: postgres
--

CREATE TABLE public.test_table (
    id integer NOT NULL,
    name text
);


ALTER TABLE public.test_table OWNER TO postgres;

--
-- Name: test_table_id_seq; Type: SEQUENCE; Schema: public; Owner: postgres
--

CREATE SEQUENCE public.test_table_id_seq
    AS integer
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE public.test_table_id_seq OWNER TO postgres;

--
-- Name: test_table_id_seq; Type: SEQUENCE OWNED BY; Schema: public; Owner: postgres
--

ALTER SEQUENCE public.test_table_id_seq OWNED BY public.test_table.id;


--
-- Name: EmailVerifications id; Type: DEFAULT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public."EmailVerifications" ALTER COLUMN id SET DEFAULT nextval('public."EmailVerifications_id_seq"'::regclass);


--
-- Name: debug_log id; Type: DEFAULT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public.debug_log ALTER COLUMN id SET DEFAULT nextval('public.debug_log_id_seq'::regclass);


--
-- Name: error_log id; Type: DEFAULT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public.error_log ALTER COLUMN id SET DEFAULT nextval('public.error_log_id_seq'::regclass);


--
-- Name: test_table id; Type: DEFAULT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public.test_table ALTER COLUMN id SET DEFAULT nextval('public.test_table_id_seq'::regclass);


--
-- Name: Apilog Apilog_pkey; Type: CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public."Apilog"
    ADD CONSTRAINT "Apilog_pkey" PRIMARY KEY ("ApiLogId");


--
-- Name: EmailVerifications EmailVerifications_pkey; Type: CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public."EmailVerifications"
    ADD CONSTRAINT "EmailVerifications_pkey" PRIMARY KEY (id);


--
-- Name: KnowledgeBase KnowledgeBase_pkey; Type: CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public."KnowledgeBase"
    ADD CONSTRAINT "KnowledgeBase_pkey" PRIMARY KEY ("KnowledgeBaseId");


--
-- Name: MachineAdd MachineAdd_pkey; Type: CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public."MachineAdd"
    ADD CONSTRAINT "MachineAdd_pkey" PRIMARY KEY ("MachineAddId");


--
-- Name: MachineAlarm MachineAlarm_pkey; Type: CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public."MachineAlarm"
    ADD CONSTRAINT "MachineAlarm_pkey" PRIMARY KEY ("MachineAlarmId");


--
-- Name: MachineDevice MachineDeviceId_pkey; Type: CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public."MachineDevice"
    ADD CONSTRAINT "MachineDeviceId_pkey" PRIMARY KEY ("MachineDeviceId");


--
-- Name: MachineIOTTopic MachineIOTTopic_pkey; Type: CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public."MachineIOTTopic"
    ADD CONSTRAINT "MachineIOTTopic_pkey" PRIMARY KEY ("TopicId");


--
-- Name: MachineIOT MachineIOT_pkey; Type: CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public."MachineIOT"
    ADD CONSTRAINT "MachineIOT_pkey" PRIMARY KEY ("MachineIOTId");


--
-- Name: Machine Machine_pkey; Type: CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public."Machine"
    ADD CONSTRAINT "Machine_pkey" PRIMARY KEY ("MachineId");


--
-- Name: SOPModel SOPModel_pkey; Type: CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public."SOPModel"
    ADD CONSTRAINT "SOPModel_pkey" PRIMARY KEY ("SOPModelId");


--
-- Name: SOP SOP_pkey; Type: CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public."SOP"
    ADD CONSTRAINT "SOP_pkey" PRIMARY KEY ("SOPId");


--
-- Name: Userinfo UserAccount_unique; Type: CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public."Userinfo"
    ADD CONSTRAINT "UserAccount_unique" UNIQUE ("UserAccount");


--
-- Name: Userinfo Userinfo_pkey; Type: CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public."Userinfo"
    ADD CONSTRAINT "Userinfo_pkey" PRIMARY KEY ("UserId");


--
-- Name: Vendors Vendors_userid_key; Type: CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public."Vendors"
    ADD CONSTRAINT "Vendors_userid_key" UNIQUE (userid);


--
-- Name: debug_log debug_log_pkey; Type: CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public.debug_log
    ADD CONSTRAINT debug_log_pkey PRIMARY KEY (id);


--
-- Name: error_log error_log_pkey; Type: CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public.error_log
    ADD CONSTRAINT error_log_pkey PRIMARY KEY (id);


--
-- Name: test_table test_table_pkey; Type: CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public.test_table
    ADD CONSTRAINT test_table_pkey PRIMARY KEY (id);


--
-- Name: Vendors vendors_email_key; Type: CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public."Vendors"
    ADD CONSTRAINT vendors_email_key UNIQUE (email);


--
-- Name: Vendors vendors_email_unique; Type: CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public."Vendors"
    ADD CONSTRAINT vendors_email_unique UNIQUE (email);


--
-- Name: Vendors vendors_pkey; Type: CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public."Vendors"
    ADD CONSTRAINT vendors_pkey PRIMARY KEY (id);


--
-- Name: Vendors vendors_userid_unique; Type: CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public."Vendors"
    ADD CONSTRAINT vendors_userid_unique UNIQUE (userid);


--
-- Name: vendors_schema_name_idx; Type: INDEX; Schema: public; Owner: postgres
--

CREATE UNIQUE INDEX vendors_schema_name_idx ON public."Vendors" USING btree (schema_name);


--
-- Name: Vendors create_user_schema_trigger; Type: TRIGGER; Schema: public; Owner: postgres
--

CREATE TRIGGER create_user_schema_trigger AFTER INSERT ON public."Vendors" FOR EACH ROW EXECUTE FUNCTION public.create_user_schema();


--
-- Name: Vendors set_schema_name; Type: TRIGGER; Schema: public; Owner: postgres
--

CREATE TRIGGER set_schema_name BEFORE INSERT ON public."Vendors" FOR EACH ROW EXECUTE FUNCTION public.generate_schema_name();


--
-- Name: MachineAdd trigger_update_knowledge_base_deleted; Type: TRIGGER; Schema: public; Owner: postgres
--

CREATE TRIGGER trigger_update_knowledge_base_deleted AFTER UPDATE ON public."MachineAdd" FOR EACH ROW EXECUTE FUNCTION public.update_knowledge_base_deleted();


--
-- Name: KnowledgeBase FK_MachineAddId; Type: FK CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public."KnowledgeBase"
    ADD CONSTRAINT "FK_MachineAddId" FOREIGN KEY ("MachineAddId") REFERENCES public."MachineAdd"("MachineAddId");


--
-- Name: SOP2 fk_machineadd; Type: FK CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public."SOP2"
    ADD CONSTRAINT fk_machineadd FOREIGN KEY ("MachineAddId") REFERENCES public."MachineAdd"("MachineAddId");


--
-- PostgreSQL database dump complete
--

